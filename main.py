import os
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
import botkeyboards as bk

# Logging
logging.basicConfig(level=logging.INFO)

# Init the bot
token = os.environ['BOT_KEY']
bot = Bot(token=token)
storage = MemoryStorage()  # Memory for FSM
dp = Dispatcher(bot, storage=storage)


def get_blacklist():
    """Gets black list from the blacklist.csv"""
    with open('blacklist.txt', 'r') as file:
        return [int(line.strip()) for line in file]


def update_blacklist(data: list):
    """Writes the updated black list to the blacklist.csv"""
    with open('blacklist.txt', 'w') as file:
        for item in data:
            file.write(str(item) + '\n')


# Init the DB
blacklist = get_blacklist()


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """This handler will be called when user sends `/start` command"""
    if message.chat.type != "private":  # Command has been sent into the group chat. Nothing to do
        return
    await message.reply(
        "<b>–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä</b>"
        "\n–ú–æ—è –∑–∞–¥–∞—á–∞ - —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –≤ –í–∞—à–µ–º —á–∞—Ç–µ –Ω–µ –ø–æ—è–≤–ª—è–ª–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –±–∞–Ω-–ª–∏—Å—Ç–∞"
        "\nüë§ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å(—É–±—Ä–∞—Ç—å) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤(–∏–∑) —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç"
        "\nüë•Ô∏è –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫  - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ß–°",
        parse_mode="HTML",
        reply_markup=bk.rk_main
    )


@dp.message_handler(commands=['help'])
@dp.message_handler(Text(equals="‚ùì –ö–∞–∫ –ø—Ä–∏—Å–ª–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç?"))
async def send_help(message: types.Message):
    """This handler will be called when user sends `/help` command"""
    if message.chat.type != "private":  # DM only
        return

    caption = (
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω—É–∂–Ω–æ `–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º`"
        "\n–î–ª—è —ç—Ç–æ–≥–æ:"
        "\n1. –ó–∞–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥ —Å –Ω–∏–º) –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ —Ç—Ä–∏ —Ç–æ—á–∫–∏"
        "\n2. –ù–∞–∂–º–∏—Ç–µ `–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º`, –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤"
        "\n3. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º –∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"
        "\n<b>–ì–æ—Ç–æ–≤–æ!</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
    )

    images = ["help1.jpg", "help2.jpg", "help3.jpg"]
    media_group = []
    for path in images:
        photo_file = types.InputFile(path)
        media_group.append(types.InputMediaPhoto(photo_file))

    await message.reply(caption, parse_mode="HTML")
    await message.answer_media_group(media=media_group)


@dp.message_handler(content_types=["contact"])
async def toggle_ban_contact(message: types.Message):
    """This handler will be called if the message content type is `contact`"""

    if message.chat.type != "private":  # DM only
        return

    contact = message.contact
    user_id = contact.user_id
    user_link = f"<a href='tg://user?id={user_id}'>–°—Å—ã–ª–∫–∞</a>"

    if user_id in blacklist:
        switch_text = "—É–¥–∞–ª—ë–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
        blacklist.remove(user_id)
    else:
        switch_text = "–¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"
        blacklist.append(user_id)

    await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({user_link}) –±—ã–ª {switch_text}", parse_mode="HTML")

    update_blacklist(blacklist)


@dp.message_handler(commands=['get_list'])
@dp.message_handler(Text(equals="üë•Ô∏è –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"))
async def send_blacklist(message: types.Message):
    """This handler will be called when user sends `/get_list` command"""
    if message.chat.type != "private":  # DM only
        return

    if not blacklist:
        await message.reply("–í —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –µ—â—ë –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç!")
        return

    text = "–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:"
    for i, user_id in enumerate(blacklist):
        text += f"\n<a href='tg://user?id={user_id}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i + 1}</a>"

    await message.reply(text, parse_mode="HTML")


@dp.message_handler(content_types=["new_chat_members"])
async def on_user_join(message: types.Message):
    """This handler will be called when anyone joins the chat"""
    # Ban if in blacklist
    for user in message.new_chat_members:
        if user.id in blacklist:
            await message.delete()
            await message.chat.kick(user_id=user.id)


@dp.message_handler(content_types=["left_chat_member"])
async def on_user_left(message: types.Message):
    """This handler will be called when anyone lefts the chat. Deletes message if user is banned"""
    if message.left_chat_member.id in blacklist:
        await message.delete()


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
